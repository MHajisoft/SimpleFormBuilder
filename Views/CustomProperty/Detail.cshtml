@using SimpleFormBuilder.Entity
@using SimpleFormBuilder.Models

@model CustomPropertyDetailModel

@using (Html.BeginForm("Update", "CustomProperty", FormMethod.Post, new { @class = "needs-validation", novalidate = "" }))
{
    @Html.HiddenFor(c => c.CustomProperty.Id)
    @Html.HiddenFor(c => c.CustomProperty.EntityName)

    <div class="row mb-3">
        @Html.LabelFor(x => x.CustomProperty.PropertyName, new { @class = "col-2 col-form-label" })
        <div class="col-4">
            @Html.DropDownListFor(x => x.CustomProperty.PropertyName, Model.PropertyNames, new { @class = "form-select", required = "" })
            <div class="invalid-feedback">
                Please select property name!
            </div>
        </div>
    </div>

    <div class="row mb-3">
        @Html.LabelFor(x => x.CustomProperty.Title, new { @class = "col-2 col-form-label" })
        <div class="col-4">
            @Html.TextBoxFor(x => x.CustomProperty.Title, new { @class = "form-control", required = "" })
            <div class="invalid-feedback">
                Please enter title!
            </div>
        </div>
    </div>
    
    <div class="row mb-3">
        @Html.LabelFor(x => x.CustomProperty.OrderIndex, new { @class = "col-2 col-form-label" })
        <div class="col-4">
            @Html.TextBoxFor(x => x.CustomProperty.OrderIndex, new { @class = "form-control", type = "number" })
            <div class="invalid-feedback">
                Please enter order!
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="form-check">
            @Html.LabelFor(x => x.CustomProperty.IsActive, new { @class = "form-check-label" })
            @Html.CheckBoxFor(x => x.CustomProperty.IsActive, new { @class = "form-check-input" })
        </div>
    </div>
    
    <div class="row mb-5">
        <a class="btn btn-danger col-1" href="@Url.Action("Index", "CustomProperty", new { entity = nameof(Person) })">Back</a>
        <button class="btn btn-success col-1" type="submit">Save</button>
    </div>
}

<script>
(() => {
  'use strict'

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  const forms = document.querySelectorAll('.needs-validation')

  // Loop over them and prevent submission
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
        if (!form.checkValidity()) {
        event.preventDefault()
        event.stopPropagation()
      }

      form.classList.add('was-validated')
    }, false)
  })
})()
</script>